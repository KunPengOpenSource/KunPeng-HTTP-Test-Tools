<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:my="clr-namespace:HTTP_Tester">

    <SolidColorBrush x:Key="NormalColor">#2D2D2D</SolidColorBrush>
    <SolidColorBrush x:Key="HighlightColor">#2D2D2D</SolidColorBrush>
    <SolidColorBrush x:Key="PressedColor">#2D2D2D</SolidColorBrush>
    <SolidColorBrush x:Key="BorderColor">#D8D8D8</SolidColorBrush>
    <SolidColorBrush x:Key="BackColor">#D8D8D8</SolidColorBrush>
    <SolidColorBrush x:Key="TextBackColor">#FFFFFF</SolidColorBrush>
    <Style x:Key="stBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="{StaticResource BorderColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{StaticResource NormalColor}"/>
        <Setter Property="CornerRadius" Value="3"/>
    </Style>
    <Style x:Key="stBackBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="{StaticResource BorderColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{StaticResource BackColor}"/>
        <!--<Setter Property="CornerRadius" Value="3"/>-->
        <Setter Property="Width" Value="9"/>

    </Style>
    <Style x:Key="stRepeatBtn" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Name="bd"
                               Style="{StaticResource stBorder}">
                        <Path
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Fill="White"
                               Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="bd" Property="Background" Value="{StaticResource HighlightColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="bd" Property="Background" Value="{StaticResource PressedColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="stScrollBtn" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="stThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Name="bd" Style="{StaticResource stBorder}"></Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter TargetName="bd" Property="Background" Value="{StaticResource PressedColor}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="bd" Property="Background" Value="{StaticResource HighlightColor}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Border Style="{StaticResource stBackBorder}">
            <Track
                     Name="PART_Track"
                     Grid.Row="0"
                     IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton
                             Style="{StaticResource stScrollBtn}"
                             Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource stThumb}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton
                             Style="{StaticResource stScrollBtn}"
                             Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Border Style="{StaticResource stBackBorder}">
            <Grid >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition MaxWidth="18"/>
                    <ColumnDefinition MaxWidth="18"/>
                </Grid.ColumnDefinitions>
                <Border
                     Grid.ColumnSpan="3"
                     CornerRadius="2"  />
                <RepeatButton
                     Grid.Column="1"                          
                     Style="{StaticResource stRepeatBtn}"
                     Width="18"
                     Command="ScrollBar.LineLeftCommand"
                     Content="M 4 0 L 4 8 L 0 4 Z" />
                <Track
                     Name="PART_Track"
                     Grid.Column="0"
                     IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton
                             Style="{StaticResource stScrollBtn}"
                             Command="ScrollBar.PageLeftCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                             Style="{StaticResource stThumb}"
                             Margin="0,1,0,1"   />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton
                             Style="{StaticResource stScrollBtn}"
                             Command="ScrollBar.PageRightCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton
                     Grid.Column="2"
                     Style="{StaticResource stRepeatBtn}"
                     Width="18"
                     Command="ScrollBar.LineRightCommand"
                     Content="M 0 0 L 4 4 L 0 8 Z"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <!-- Simple ScrollViewer 
	ScrollViewer 是 Grid 控件，该控件包含 ContentPresenter 以及 Horizontal 和 Vertical ScrollBar 
	它可供 ListBox、MenuItem、ComboBox 和 TreeView 使用 -->
    <Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        
                        <!-- ScrollBars 的可见性通过控件的实现来控制 -->
                        <ScrollBar Name="PART_VerticalScrollBar"
                                       Grid.Column="1"
                                       Grid.Row="0"
                                       Value="{TemplateBinding VerticalOffset}"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                       Template="{StaticResource VerticalScrollBar}"/>
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                       Orientation="Horizontal"
                                       Grid.Column="0"
                                       Grid.Row="1"
                                        Value="{TemplateBinding HorizontalOffset}"
                                        Maximum="{TemplateBinding ScrollableWidth}"
                                        ViewportSize="{TemplateBinding ViewportWidth}"
                                        Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                        Template="{StaticResource HorizontalScrollBar}"/>
                        <!--<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />-->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Simple ListBox - 它使用 SimpleScrollViewer 来使项滚动，并使用 SimpleListBoxItem 定义每个项的外观 -->
    <Style x:Key="SimpleListView" TargetType="{x:Type ListView}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ScrollViewer Margin="1" Style="{DynamicResource SimpleScrollViewer}" Focusable="false" Background="{TemplateBinding Background}">
                            <!-- StackPanel 用来显示子级，方法是将 IsItemsHost 设置为 True -->
                            <StackPanel Margin="2" IsItemsHost="true">
                            </StackPanel>

                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--自定义ListViewItem-->
    <Style TargetType="{x:Type ListViewItem}">
        <Style.Setters>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border x:Name="bd"
                                BorderBrush="#FFC9C9C9"
                                BorderThickness="0,0,0,1"
                                MinHeight="28"                                
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                            <GridViewRowPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="3"/>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Trigger.Setters>
                                    <Setter TargetName="bd" Property="Background" Value="#CCCCCC" >
                                        <!--<Setter.Value>
                                                <LinearGradientBrush StartPoint="0.5,0.22" EndPoint="0.5,1">
                                                    <GradientStop Color="LightGray" Offset="0.31"/>
                                                    <GradientStop Color="Gray" Offset="0.88"/>
                                                </LinearGradientBrush>
                                            </Setter.Value>-->
                                    </Setter>
                                </Trigger.Setters>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <Style x:Key="txbox1" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Background" Value="#FFFFFFFF"></Setter>
        <Setter Property="BorderBrush" Value="#dbdbdb"></Setter>
    </Style>
    <Style x:Key="txpwd1" TargetType="{x:Type PasswordBox}">
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Background" Value="#FFFFFFFF"></Setter>
        <Setter Property="BorderBrush" Value="#dbdbdb"></Setter>
    </Style>
    <!--自定义文本框-->
    <VisualBrush x:Key="HelpBrush" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Visual>
            <TextBlock Foreground="#CCCCCC" Text="例如：www.kunpengos.cn" />
        </VisualBrush.Visual>
    </VisualBrush>
    <Style x:Key="iTextStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Background" Value="#FFFFFFFF"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#dbdbdb"></Setter>
        <Setter Property="FontSize" Value="13"></Setter>
        <Setter Property="Foreground" Value="#4c4c4c"></Setter>
        <Setter Property="FontFamily" Value="新宋体"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Style.Triggers>
            <Trigger Property="Text" Value="{x:Null}">
                <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
            </Trigger>
            <Trigger Property="Text" Value="">
                <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <VisualBrush x:Key="HelpBrush1" TileMode="None" Stretch="None" AlignmentX="Left" AlignmentY="Top" >
        <VisualBrush.Visual>
            <TextBlock Height="25" Foreground="#CCCCCC" Text="匹配Cookies，留空为不验证。" />
        </VisualBrush.Visual>
    </VisualBrush>
    <Style x:Key="iTextStyle1" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Background" Value="#FFF2F2F2"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#C9C9C9"></Setter>
        <Setter Property="FontSize" Value="13"></Setter>
        <Setter Property="Foreground" Value="#666666"></Setter>
        <Setter Property="FontFamily" Value="新宋体"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Top"></Setter>
        <Style.Triggers>
            <Trigger Property="Text" Value="{x:Null}">
                <Setter Property="Background" Value="{StaticResource HelpBrush1}"/>
            </Trigger>
            <Trigger Property="Text" Value="">
                <Setter Property="Background" Value="{StaticResource HelpBrush1}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--自定义下拉框样式-->
    <Style x:Key="iListStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Background" Value="#FFFFFFFF"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#C9C9C9"></Setter>
        <Setter Property="FontSize" Value="13"></Setter>
        <Setter Property="Foreground" Value="#333333"></Setter>
    </Style>
    
    <Style x:Key="btnHttpStatus" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="18"></Setter>
        <Setter Property="Width" Value="123"></Setter>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0">
                        <Image Name="imgBtnDNStest" Stretch="Fill" Source="Image/nav4.png" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnHttpFast" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="18"></Setter>
        <Setter Property="Width" Value="123"></Setter>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0">
                        <Image Name="imgBtnWhois" Stretch="Fill" Source="Image/nav5.png" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnHttpMore1" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="17"></Setter>
        <Setter Property="Width" Value="105"></Setter>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0">
                        <Image Name="imgBtnDNStest" Stretch="Fill" Source="Image/words11.png" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnHome" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="18"></Setter>
        <Setter Property="Width" Value="123"></Setter>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0">
                        <Image Name="imgBtnDNStest" Stretch="Fill" Source="Image/words10.png" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="btnClose" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="12"></Setter>
        <Setter Property="Width" Value="12"></Setter>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0">
                        <Image Name="imgBtn1" Stretch="Fill" Source="Image/btn1.png" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnMin" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="12"></Setter>
        <Setter Property="Width" Value="12"></Setter>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0">
                        <Image Name="imgBtn2" Stretch="Fill" Source="Image/btn2.png" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btn2" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Height" Value="50"></Setter>
        <Setter Property="Width" Value="114"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0">
                        <Image Name="image2" Stretch="Fill" Source="Image/btn3.png" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btn3" TargetType="Button">
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Height" Value="50"></Setter>
        <Setter Property="Width" Value="114"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0">
                        <Image Name="image2" Stretch="Fill" Source="Image/btn4.png" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--自定义文本框样式-->
    <Style x:Key="{x:Type my:InfoTextBox}" TargetType="{x:Type my:InfoTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type my:InfoTextBox}">
                    <ControlTemplate.Resources>

                        <Storyboard x:Key="enterGotFocus" >
                            <DoubleAnimation Duration="0:0:0.2" To=".33"
			  	Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                        </Storyboard>
                        <Storyboard x:Key="exitGotFocus" >
                            <DoubleAnimation Duration="0:0:0.4"
			  	Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                        </Storyboard>

                        <Storyboard x:Key="enterHasText" >
                            <DoubleAnimation Duration="0:0:0.2" From=".33" To="0"
			  	Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                        </Storyboard>
                        <Storyboard x:Key="exitHasText" >
                            <DoubleAnimation Duration="0:0:0.4"
			  	Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                        </Storyboard>

                    </ControlTemplate.Resources>
                    <Border Name="Bd"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Decorator x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="3"/>
                            <TextBlock Text="{TemplateBinding TextBoxInfo}" x:Name="Message"
								Foreground="Navy" IsHitTestVisible="False"
								FontStyle="Italic" Opacity="0.67" HorizontalAlignment="Left" VerticalAlignment="Center"
								Margin="6,0,0,0"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasText" Value="False"/>
                                <Condition Property="IsFocused" Value="True"/>

                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource enterGotFocus}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource exitGotFocus}"/>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="HasText" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource enterHasText}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource exitHasText}"/>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled"
								 Value="false">
                            <Setter TargetName="Bd"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>

                        <!-- Width -->
                        <Trigger Property="Width"
								 Value="Auto">
                            <Setter Property="MinWidth"
									Value="100"/>
                        </Trigger>
                        <!-- Height -->
                        <Trigger Property="Height"
								 Value="Auto">
                            <Setter Property="MinHeight"
									Value="20"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--自定义复选框-->
    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Height" Value="14"/>
        <Setter Property="IsChecked" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="14"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Height}">
                            <Rectangle x:Name="CheckBoxRectangle" Fill="#FFFFFF" Opacity="1" RadiusY="1" RadiusX="1"/>
                            <Rectangle x:Name="CheckBoxRectangleOut" Stroke="#dbdbdb" StrokeThickness="1" RadiusY="1" RadiusX="1"/>
                            <Grid x:Name="CheckedMark" Width="14" Height="14" Visibility="Hidden">
                                <Path SnapsToDevicePixels="False" StrokeThickness="2" Data="M3,7 L6,10" Stroke="White"/>
                                <Path SnapsToDevicePixels="False" StrokeThickness="2" Data="M6,11 L11,3" Stroke="White"/>
                            </Grid>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckedMark" Property="Visibility" Value="Visible"></Setter>
                            <Setter TargetName="CheckBoxRectangle" Property="Fill" Value="#02b6e6"></Setter>
                            <Setter TargetName="CheckBoxRectangle" Property="Opacity" Value="1"></Setter>
                            <Setter TargetName="CheckBoxRectangleOut" Property="Stroke" Value="#02b6e6"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>